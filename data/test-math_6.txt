sim-bpred: SimpleScalar/PISA Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

sim: command line: ./sim-bpred -bpred hash01 tests/bin.little/test-math 

sim: simulation started @ Mon May 17 03:06:48 2021, options follow:

sim-bpred: This simulator implements a branch predictor analyzer.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst                   0 # maximum number of inst's to execute
-bpred                 hash01 # branch predictor type {nottaken|taken|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
-bpred:hash_01   512 # hash config (hash table size)
-bpred:hash_sign 512 # hash config (hash table size)
-bpred:hash_sms  512 # hash config (hash table size)

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.



sim: ** starting functional simulation w/ predictors **
pow(12.0, 2.0) == 144.000000
pow(10.0, 3.0) == 1000.000000
pow(10.0, -3.0) == 0.001000
str: 123.456
x: 123.000000
str: 123.456
x: 123.456000
str: 123.456
x: 123.456000
123.456 123.456000 123 1000
sinh(2.0) = 3.62686
sinh(3.0) = 10.01787
h=3.60555
atan2(3,2) = 0.98279
pow(3.60555,4.0) = 169
169 / exp(0.98279 * 5) = 1.24102
3.93117 + 5*log(3.60555) = 10.34355
cos(10.34355) = -0.6068,  sin(10.34355) = -0.79486
x     0.5x
x0.5     x
x   0.5x
-1e-17 != -1e-17 Worked!

sim: ** simulation statistics **
sim_num_insn                 189388 # total number of instructions executed
sim_num_refs                  47619 # total number of loads and stores executed
sim_elapsed_time                  1 # total simulation time in seconds
sim_inst_rate           189388.0000 # simulation speed (in insts/sec)
sim_num_branches              32161 # total number of branches executed
sim_IPB                      5.8887 # instruction per branch
bpred_hash_01.lookups         32161 # total number of bpred lookups
bpred_hash_01.updates         32161 # total number of updates
bpred_hash_01.addr_hits        13078 # total number of address-predicted hits
bpred_hash_01.dir_hits        23142 # total number of direction-predicted hits (includes addr-hits)
bpred_hash_01.misses           9019 # total number of misses
bpred_hash_01.jr_hits           464 # total number of address-predicted hits for JR's
bpred_hash_01.jr_seen          3134 # total number of JR's seen
bpred_hash_01.jr_non_ras_hits.PP          464 # total number of address-predicted hits for non-RAS JR's
bpred_hash_01.jr_non_ras_seen.PP         3134 # total number of non-RAS JR's seen
bpred_hash_01.bpred_addr_rate    0.4066 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_hash_01.bpred_dir_rate    0.7196 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_hash_01.bpred_jr_rate    0.1481 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_hash_01.bpred_jr_non_ras_rate.PP    0.1481 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_hash_01.retstack_pushes            0 # total number of address pushed onto ret-addr stack
bpred_hash_01.retstack_pops            0 # total number of address popped off of ret-addr stack
bpred_hash_01.used_ras.PP            0 # total number of RAS predictions used
bpred_hash_01.ras_hits.PP            0 # total number of RAS hits
bpred_hash_01.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)

